#!/bin/bash 

PARALLEL_JOBS=16

GITPATH="$HOME/devel/tizen3/git"

function parallel_jobs {
	local max_number=$((0 + ${1:-0}))
	while true; do
		jobs &>/dev/null
		if [[ $(jobs -p | wc -l) -lt $max_number ]]; then
			break
		fi
		sleep 0.3
	done
}

function get_git_infos() {
	local pkgname=$1
	local repo=$2
	local rev=$3
	local upstreamversion=$4
	local license=$5

	if [ "$repo" != "" -a -e $GITPATH/$repo ]; then
		pushd $GITPATH/$repo &> /dev/null
	else
		echo "Error: repo \"$GITPATH/$repo\" for package \"$pkgname\" doesn't exist." >&2
		return 1
	fi

	local tmpfile=$(mktemp)
	trap "rm -f ${tmpfile}*" STOP INT QUIT EXIT

	if [ "`git branch -r | grep origin/upstream`" ]; then
		# Upstream package, let's find the upstream tag
		local upstream_version=$upstreamversion

		# retrieve .gbs.conf at the specified revision
		if git show $rev:.gbs.conf >$tmpfile 2>/dev/null; then
			# Use the tag defined in .gbs.conf at the proper rev
			local tag=$(eval echo `grep upstream_tag $tmpfile | awk '{print $3;}'`)
		else
			# Use tag generated by pristine-tar
			local tag="upstream/$upstreamversion"
		fi

		# Get the revision of the upstream tag
		if [ "`git tag | grep "$tag" --`" ]; then
			firstrev=`git log --pretty=format:"%H" -n 1 $tag --`
		else
			# No upstream tag: use all commits
			echo "Warning: no upstream tag \"$tag\" found for \"$pkgname\", using all commits" >&2
			tag="BAD"
			firstrev=`git rev-list $rev | tail -n 1`
		fi

	else
		# Tizen packages: all commits are taken into account so first commit is the initial one
		firstrev=`git rev-list $rev | tail -n 1`
	fi

	local intelcommits="n/a"
	local eurogicielcommits="n/a"
	local totalcommits="n/a"

	if [[ -z "$firstrev" || "$tag" == "BAD" ]]; then
		echo "Error: invalid first revision for package \"$pkgname\"" >&2
	else 
		# List of the authors per commit
		local logs=`git log $firstrev..$rev --pretty=format:"%ae"`

		intelcommits=`echo $logs | sed 's/ /\n/g' | grep -Ec "intel\."`
		eurogicielcommits=`echo $logs | sed 's/ /\n/g' | grep -Ec "eurogiciel\.|fridu\."`
		totalcommits=`echo $logs | sed 's/ /\n/g' | wc -l`
	fi

	echo "\"$pkgname\";\"$repo\";\"$upstreamversion\";\"$tag\";\"${firstrev:0:8}\";\"${rev:0:8}\";$eurogicielcommits;$intelcommits;$totalcommits;\"$license\""
#	echo $pkgname $upstreamversion $tag ${firstrev:0:8} ${rev:0:8} $eurogicielcommits $intelcommits $totalcommits >&2
}

while IFS=";" read pkgname repo rev upstreamversion license; do
	parallel_jobs $PARALLEL_JOBS
	get_git_infos $pkgname $repo "$rev" "$upstreamversion" "$license" &
done

parallel_jobs 1
